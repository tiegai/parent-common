buildscript {
    ext {
        piTestCommandLineVersion = '1.1.11'
        piTestGradlePluginVersion = '1.1.11'
        guavaVersion = '31.1-jre'
        spotBugsPluginVersion = '2.0.0'
        springBootPluginVersion = '2.7.3'
    }
    
    dependencies {
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:${piTestGradlePluginVersion}")
        classpath("org.pitest:pitest-command-line:${piTestCommandLineVersion}")
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotBugsPluginVersion}"
        classpath "com.google.guava:guava:${guavaVersion}"
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

/**
 * Centralized declarations using allprojects{}.
 * No longer have to declare the same configs in each subProject.
 *
 * TODO allprojects{} is officially discouraged to use,
 * https://docs.gradle.org/6.8/userguide/sharing_build_logic_between_subprojects.html#sec:convention_plugins_vs_cross_configuration
 */
allprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    
    apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/check.gradle')
    apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/version.gradle')
    apply from: file(rootProject.projectDir.getAbsolutePath() + '/gradle/sources.gradle')
    
    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = false
        }
    }
    
    idea {
        module {
            downloadJavadoc = true
            downloadSources = false
        }
    }
    
    compileJava {
        options.compilerArgs << '-Xlint:unchecked'
        options.fork = true
    }
    
    compileTestJava {
        options.compilerArgs << '-Xlint:deprecation'
        options.fork = true
    }
    
    configurations {
        compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    
    jar {
        dependsOn versionInfo
        baseName = project.name
        version = releaseVersion
        
        exclude('application.yaml')
    }
    
    /**
     * TODO Replace allprojects.repositories{} with dependencyResolutionManagement{} in settings.gradle, once upgraded to Gradle v6.8 or above.
     * https://docs.gradle.org/6.8/userguide/declaring_repositories.html#sub:centralized-repository-declaration
     */
    repositories {
        // Use -PuseMavenLocal=true to enable
        if (project.hasProperty("useMavenLocal")) {
            // DO NOT put mavenLocal() in the general area as an always-available option.
            // It will sometimes fail your builds with bizarre errors.
            mavenLocal()
        }
        
        maven {
            credentials {
                username System.getenv('SA_U')
                password System.getenv('SA_P')
            }
            url 'https://artifactory.nike.com/artifactory/all-repos'
        }
        
        mavenCentral()
    }
    
    publishing {
        publications {
            "$project.name" (MavenPublication) {
                group project.properties.get("groupId")
                from components.java
                // https://docs.gradle.org/5.6.4/dsl/org.gradle.api.publish.maven.MavenPublication.html#N1C25E
                artifact sourcesJar
            }
        }
        
        repositories {
            maven {
                url 'https://artifactory.nike.com/artifactory/maven'
                credentials {
                    username System.getenv('SA_U')
                    password System.getenv('SA_P')
                }
            }
        }
    }
}

ext {
    // project dependency versions
    awsSdk1Version = '1.12.383'
    awsSdk2Version = '2.19.15'
    spindleVersion = '7.0.1.54'
    springBootVersion = '2.7.8'
    tracingCoreVersion = '1.0.11'
    nikeInternalUtilVersion = '0.9.0.1'
    lombokVersion = '1.18.24'
    wingtipsInternalVersion = '9.2.0.21'
    wingtipsVersion = '0.23.1'
    cerberusVersion = '3.2.2'
    cerberusArchaiusVersion = '7.1.0'
    backstopperInternalVersion = '5.0.0.35'
    backstopperVersion = '0.12.0'

    // test dependency versions
    junitVersion = '4.12'
    assertjVersion = '3.8.0'
    mockitoVersion = '2.22.0'
    restAssuredVersion = '3.0.3'
    junitQuickCheckVersion = '1.0'
}

group = groupId
version = releaseVersion
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Log4j 2 vulnerability
ext['log4j2.version'] = '2.17.1'

dependencies {
    // you no longer have to specify versions when declaring spring-boot dependencies
    // find a list of available spring-boot modules at https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/2.7.8
    api(enforcedPlatform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))
    // find a list of available AWS v1 modules at https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-bom/1.12.383
    api(enforcedPlatform("com.amazonaws:aws-java-sdk-bom:${awsSdk1Version}"))
    // find a list of available AWS v2 modules at https://mvnrepository.com/artifact/software.amazon.awssdk/bom/2.19.15
    api(enforcedPlatform("software.amazon.awssdk:bom:${awsSdk2Version}"))
    // learn more about the differences between AWS v1 and v2 at https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/migration-whats-different.html
    
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("javax.annotation:javax.annotation-api")
    implementation("com.fasterxml.jackson.core:jackson-core")
    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("org.apache.commons:commons-lang3")
    implementation("cn.hutool:hutool-all:5.8.10")
    implementation("org.springframework:spring-beans")
    implementation("org.springframework:spring-context")
    implementation("org.springframework:spring-web")
    implementation("org.springframework:spring-webmvc")
    implementation("org.springframework:spring-core")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.apache.tomcat.embed:tomcat-embed-core")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    //redis
    implementation("redis.clients:jedis")
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("io.netty:netty-all")
    // Swagger UI
    implementation("io.springfox:springfox-swagger2:2.10.5")
    implementation("io.springfox:springfox-swagger-ui:2.10.5")
    implementation("com.github.xiaoymin:knife4j-openapi2-spring-boot-starter:4.0.0")
    // Wingtips
    implementation("com.nike.wingtips:wingtips-spring-boot:${wingtipsVersion}") {
        exclude group: 'org.springframework', module: 'spring-web'
        exclude group: 'org.springframework.boot', module: 'spring-boot-autoconfigure'
    }
    // Test dependencies
    testImplementation("junit:junit")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-inline")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}
