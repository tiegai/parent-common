buildscript {
    ext {
        piTestCommandLineVersion = '1.1.11'
        piTestGradlePluginVersion = '1.1.11'
        guavaVersion = '31.1-jre'
        spotBugsPluginVersion = '2.0.0'
        springBootPluginVersion = '2.7.3'
    }
    
    dependencies {
        classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:${piTestGradlePluginVersion}")
        classpath("org.pitest:pitest-command-line:${piTestCommandLineVersion}")
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:${spotBugsPluginVersion}"
        classpath "com.google.guava:guava:${guavaVersion}"
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'eclipse'
}

ext {
    // project dependency versions
    spindleVersion = '7.0.1.54'
    springBeansVersion = '5.3.22'
    springAopVersion = '2.7.3'
    springBootTomcatVersion = '9.0.65'
    tracingCoreVersion = '1.0.11'
    nikeInternalUtilVersion = '0.9.0.1'
    lombokVersion = '1.18.24'
    wingtipsInternalVersion = '9.2.0.21'
    wingtipsVersion = '0.23.1'
    cerberusVersion = '3.2.2'
    cerberusArchaiusVersion = '7.1.0'
    backstopperInternalVersion = '5.0.0.35'
    backstopperVersion = '0.12.0'

    // test dependency versions
    junitVersion = '4.12'
    assertjVersion = '3.8.0'
    mockitoVersion = '2.22.0'
    restAssuredVersion = '3.0.3'
    junitQuickCheckVersion = '1.0'
}

apply from: file('gradle/check.gradle')
apply from: file('gradle/release.gradle')
apply from: file('gradle/sources.gradle')

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = false
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = false
    }
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.fork = true
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
    options.fork = true
}

configurations {
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

jar {
    dependsOn versionInfo
    baseName = artifactId
    version = releaseVersion

    exclude('application.yaml')
}

group = groupId
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

/**
 * Centralized repositories{} declaration using allprojects{}.
 * No longer have to declare repositories{} in each subProject.
 *
 * TODO Replace allprojects{} with dependencyResolutionManagement{} in settings.gradle, once upgraded to Gradle v6.8 or above.
 * https://docs.gradle.org/6.8/userguide/declaring_repositories.html#sub:centralized-repository-declaration
 * Because allprojects{} is officially discouraged to use.
 * https://docs.gradle.org/6.8/userguide/sharing_build_logic_between_subprojects.html#sec:convention_plugins_vs_cross_configuration
 */
allprojects {
    repositories {
        // Use -PuseMavenLocal=true to enable
        if (project.hasProperty("useMavenLocal")) {
            // DO NOT put mavenLocal() in the general area as an always-available option.
            // It will sometimes fail your builds with bizarre errors.
            mavenLocal()
        }
        
        maven {
            credentials {
                username System.getenv('SA_U') //fetched from environment
                password System.getenv('SA_P') //fetched from environment
            }
            url 'https://artifactory.nike.com/artifactory/all-repos'
        }
    
        mavenCentral()
    }
}

// Log4j 2 vulnerability
ext['log4j2.version'] = '2.17.1'

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:2.7.6")
    compile("javax.annotation:javax.annotation-api:1.2")
    compile("com.fasterxml.jackson.core:jackson-core:2.13.3")
    compile("com.fasterxml.jackson.core:jackson-databind:2.13.3")
    compile("org.apache.commons:commons-lang3:3.12.0")
    compile("cn.hutool:hutool-all:5.8.10")
    compile("org.springframework:spring-beans:${springBeansVersion}")
    compile("org.springframework:spring-context:${springBeansVersion}")
    compile("org.springframework:spring-web:${springBeansVersion}")
    compile("org.springframework:spring-webmvc:${springBeansVersion}")
    compile("org.springframework:spring-core:${springBeansVersion}")
    compile("org.springframework.boot:spring-boot-starter-aop:${springAopVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-core:${springBootTomcatVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    // Swagger UI
    compile("io.springfox:springfox-swagger2:2.10.5")
    compile("io.springfox:springfox-swagger-ui:2.10.5")
    compile("com.github.xiaoymin:knife4j-openapi2-spring-boot-starter:4.0.0")
    // Test dependencies
    testCompile("junit:junit:${junitVersion}")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}
